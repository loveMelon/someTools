<?xml version="1.0" encoding="ISO-8859-1"?>

<detailedreport xmlns:xsi="http&#x3a;&#x2f;&#x2f;www.w3.org&#x2f;2001&#x2f;XMLSchema-instance" xmlns="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0" xsi:schemaLocation="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0 https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;resource&#x2f;detailedreport.xsd" report_format_version="1.5" app_name="1273 - FA - eCashman - CN" app_id="380483" sandbox_name="DMWeb" sandbox_id="489328" first_build_submitted_date="2017-11-07 03&#x3a;04&#x3a;47 UTC" version="2018011101" build_id="1900820" submitter="Eddie Xu" platform="Not Specified" assurance_level="4" business_criticality="4" generation_date="2018-01-11 05&#x3a;06&#x3a;11 UTC" veracode_level="VL1" total_flaws="365" flaws_not_mitigated="365" teams="1273 - FA - eCashman - CN" life_cycle_stage="Not Specified" planned_deployment_date="2017-12-07 09&#x3a;22&#x3a;53 UTC" last_update_time="2018-01-11 03&#x3a;52&#x3a;28 UTC" is_latest_build="false" policy_name="AIG High" policy_version="7" policy_compliance_status="Did Not Pass" policy_rules_status="Not Assessed" grace_period_expired="false" scan_overdue="false" any_type_scan_due="2019-01-11 03&#x3a;52&#x3a;24 UTC" business_owner="Rosanna Canlas" business_unit="Corporate Systems" tags="" legacy_scan_engine="false"><static-analysis rating="F" score="38" submitted_date="2018-01-11 03&#x3a;15&#x3a;01 UTC" published_date="2018-01-11 03&#x3a;52&#x3a;24 UTC" version="2018011101" analysis_size_bytes="2676703" engine_version="118901">
      <modules>
         <module name="dmweb.war" compiler="JAVAC_6" os="Java J2SE 6" architecture="JVM" loc="235901" score="38" numflawssev0="0" numflawssev1="0" numflawssev2="63" numflawssev3="0" numflawssev4="302" numflawssev5="0"/>
      </modules>
   </static-analysis>
   <severity level="5"/>
   <severity level="4">
      <category categoryid="19" categoryname="SQL Injection" pcirelated="false">
         <desc>
            <para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
               <bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded &#x28;&#x25;xx&#x29;, HTML-encoded &#x28;&#x26;&#x23;xx&#x3b;&#x29;, or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
               <bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
            </para>
         </recommendations>
         <cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" pcirelated="false" owasp="929" sans="864">
            <description>
               <text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
            </description>
            <staticflaws>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14354" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AssociatedDocumentEntityManager.java" line="198" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.AssociatedDocumentEntityManager" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="64"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14577" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AssociatedDocumentEntityManager.java" line="344" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.AssociatedDocumentEntityManager" functionprototype="void deleteSponsorDocs&#x28;document.AssociatedDocument, core.entityManagement.Transaction&#x29;" functionrelativelocation="43"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14810" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AssociatedDocumentEntityManager.java" line="402" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.AssociatedDocumentEntityManager" functionprototype="void insertSponsorDocs&#x28;document.AssociatedDocument, core.entityManagement.Transaction&#x29;" functionrelativelocation="80"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14556" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AssociatedDocumentEntityManager.java" line="429" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.AssociatedDocumentEntityManager" functionprototype="void deleteCampaignDocs&#x28;document.AssociatedDocument, core.entityManagement.Transaction&#x29;" functionrelativelocation="43"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14599" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AutorejectionEntityManager.java" line="220" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.AutorejectionEntityManager" functionprototype="core.entityManagement.Entity retrieveRejectRunNo&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="46"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14620" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BankBranchEntityManager.java" line="52" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BankBranchEntityManager" functionprototype="void createBankBranch&#x28;billing.BankBranch, core.entityManagement.Transaction&#x29;" functionrelativelocation="71"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14418" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BankBranchEntityManager.java" line="103" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BankBranchEntityManager" functionprototype="void deleteBankBranch&#x28;billing.BankBranch, core.entityManagement.Transaction&#x29;" functionrelativelocation="43"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14507" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BankBranchEntityManager.java" line="204" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BankBranchEntityManager" functionprototype="core.entityManagement.Entity retrieveBankBranch&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="48"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14604" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BankBranchEntityManager.java" line="260" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BankBranchEntityManager" functionprototype="void updateBankBranch&#x28;billing.BankBranch, core.entityManagement.Transaction&#x29;" functionrelativelocation="70"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14691" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BankCompanyEntityManager.java" line="77" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BankCompanyEntityManager" functionprototype="void createBankCompany&#x28;billing.BankCompany, core.entityManagement.Transaction&#x29;" functionrelativelocation="85"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14833" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BankCompanyEntityManager.java" line="213" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BankCompanyEntityManager" functionprototype="core.entityManagement.Entity retrieveBankCompanies&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="36"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14486" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BankCompanyEntityManager.java" line="295" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BankCompanyEntityManager" functionprototype="void updateBankCompany&#x28;billing.BankCompany, core.entityManagement.Transaction&#x29;" functionrelativelocation="87"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14553" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BankDetsExtEntityMgr.java" line="64" sourcefilepath="aiu&#x2f;dmweb&#x2f;countryspecific&#x2f;CN&#x2f;" scope="aiu.dmweb.countryspecific.CN.BankDetsExtEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="32"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14663" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingEntityManager.java" line="70" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingEntityManager" functionprototype="void delete&#x28;billing.InternalBillingTransaction, core.entityManagement.Transaction&#x29;" functionrelativelocation="43"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14444" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingEntityManager.java" line="97" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingEntityManager" functionprototype="void delete&#x28;billing.InternalBillingTransaction, core.entityManagement.Transaction&#x29;" functionrelativelocation="75"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14492" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, java.sql.preparedstatement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingEntityManager.java" line="286" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingEntityManager" functionprototype="void insert&#x28;billing.InternalBillingTransaction, core.entityManagement.Transaction&#x29;" functionrelativelocation="78"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14804" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingEntityManager.java" line="317" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingEntityManager" functionprototype="void insert&#x28;billing.InternalBillingTransaction, core.entityManagement.Transaction&#x29;" functionrelativelocation="92"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14602" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingEntityManager.java" line="329" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingEntityManager" functionprototype="void insert&#x28;billing.InternalBillingTransaction, core.entityManagement.Transaction&#x29;" functionrelativelocation="96"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14717" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingEntityManager.java" line="513" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingEntityManager" functionprototype="core.entityManagement.Entity retrieveSummary&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="37"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14737" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingEntityManager.java" line="555" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingEntityManager" functionprototype="core.entityManagement.Entity retrieveSummary&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="74"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14677" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingEntityManager.java" line="625" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingEntityManager" functionprototype="void deletePendingPayment&#x28;utilities.EntityHash, core.entityManagement.Transaction&#x29;" functionrelativelocation="60"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14777" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingEntityManager.java" line="698" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingEntityManager" functionprototype="core.entityManagement.Entity retrieveBillPendingPayments&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="33"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14701" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingEntityManager.java" line="787" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingEntityManager" functionprototype="void updateBillRejectPayments&#x28;billing.InternalBillingTransaction, core.entityManagement.Transaction&#x29;" functionrelativelocation="64"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14816" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingExpressEntityManager.java" line="365" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingExpressEntityManager" functionprototype="core.entityManagement.Entity retrieveTapeCounts&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="54"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14417" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingExpressEntityManager.java" line="584" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingExpressEntityManager" functionprototype="core.entityManagement.Entity updateBillingRecords&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="73"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14689" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingExpressEntityManager.java" line="607" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingExpressEntityManager" functionprototype="core.entityManagement.Entity updateBillingRecords&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="89"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14652" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingOrgEntityManager.java" line="108" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingOrgEntityManager" functionprototype="void insertBillOrg&#x28;billing.BillingOrg, core.entityManagement.Transaction&#x29;" functionrelativelocation="81"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14523" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingOrgEntityManager.java" line="209" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingOrgEntityManager" functionprototype="core.entityManagement.Entity retrieveBillingOrg&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="39"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14792" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingOrgEntityManager.java" line="297" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingOrgEntityManager" functionprototype="void updateBillOrg&#x28;billing.BillingOrg, core.entityManagement.Transaction&#x29;" functionrelativelocation="84"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14562" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingPatternEntityManager.java" line="134" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingPatternEntityManager" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="33"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14408" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingPatternEntityManager.java" line="334" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingPatternEntityManager" functionprototype="void insertPattern&#x28;billing.PatternSeries, core.entityManagement.Transaction&#x29;" functionrelativelocation="75"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14700" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingPatternEntityManager.java" line="450" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingPatternEntityManager" functionprototype="void updatePattern&#x28;billing.PatternSeries, core.entityManagement.Transaction&#x29;" functionrelativelocation="72"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14758" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingRunSummaryEntityManager.java" line="174" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingRunSummaryEntityManager" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="56"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14582" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingRunSummaryEntityManager.java" line="383" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingRunSummaryEntityManager" functionprototype="void update&#x28;billing.BillingRunSummary, core.entityManagement.Transaction&#x29;" functionrelativelocation="80"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14551" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingTrxnSummaryDetailEntityMgr.java" line="111" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.BillingTrxnSummaryDetailEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="51"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14631" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="152" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="core.entityManagement.Entity retrieveCampaign&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="35"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14808" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="270" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="java.util.ArrayList retrieveTpaLocationList&#x28;java.util.Hashtable&#x29;" functionrelativelocation="43"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14379" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="337" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="java.util.ArrayList retrieveCampaignTests&#x28;java.util.Hashtable, java.sql.Connection&#x29;" functionrelativelocation="42"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14560" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="399" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="java.util.ArrayList retrieveCommissionsList&#x28;java.util.Hashtable, java.sql.Connection&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14443" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="452" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="java.util.ArrayList retrievePaymentCompany&#x28;java.lang.String, java.sql.Connection&#x29;" functionrelativelocation="27"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14641" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="545" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="java.util.ArrayList retrievePlanNoList&#x28;java.util.Hashtable, java.sql.Connection&#x29;" functionrelativelocation="42"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14537" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="592" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="java.util.ArrayList retrieveTestOffers&#x28;java.util.Hashtable, java.lang.String, java.sql.Connection&#x29;" functionrelativelocation="19"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14479" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="700" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="java.util.ArrayList retrieveTpaAgencyList&#x28;java.util.Hashtable, java.sql.Connection&#x29;" functionrelativelocation="30"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14378" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="762" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void deleteCampaign&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="13"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14588" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="771" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void deleteCampaign&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="27"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14578" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="780" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void deleteCampaign&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="41"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14541" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="789" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void deleteCampaign&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="55"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14549" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="798" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void deleteCampaign&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="70"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14353" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="835" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void deleteCampaignTest&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="27"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14449" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="844" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void deleteCampaignTest&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="57"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14607" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="932" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void insertCampaign&#x28;campaign.Campaign, core.entityManagement.Transaction&#x29;" functionrelativelocation="92"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14715" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="988" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void insertPlanNo&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="72"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14605" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="1036" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void insertTPAAgencies&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="80"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14453" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="1123" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void updateCampaignStatus&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="48"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14348" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="1260" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void insertCampaignOffers&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="95"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14595" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="1346" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void insertCampaignPaymentOption&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="90"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14614" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="1405" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void insertCampaignTest&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="87"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14600" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignEntityMgr.java" line="1469" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignEntityMgr" functionprototype="void insertProducerCommission&#x28;campaign.Campaign, java.sql.Connection&#x29;" functionrelativelocation="87"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14806" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="183" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="void insertProducer&#x28;campaign.Producer, core.entityManagement.Transaction&#x29;" functionrelativelocation="81"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14526" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="271" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="void insertSponsor&#x28;campaign.Sponsor, core.entityManagement.Transaction&#x29;" functionrelativelocation="82"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14464" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="329" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="void insertSponsorContact&#x28;campaign.SponsorContact, core.entityManagement.Transaction&#x29;" functionrelativelocation="78"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14395" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="401" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="void insertSubProducer&#x28;campaign.SubProducer, core.entityManagement.Transaction&#x29;" functionrelativelocation="86"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14447" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="526" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="core.entityManagement.Entity retrieveProducer&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14650" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="736" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="core.entityManagement.Entity retrieveSponsor&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14441" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="832" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="java.util.ArrayList retrieveSponsorContacts&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="35"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14375" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="899" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="core.entityManagement.Entity retrieveSponsorList&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="49"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14522" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="1023" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="java.util.ArrayList retrieveSubProducers&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="35"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14410" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="1123" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="void updateProducer&#x28;campaign.Producer, core.entityManagement.Transaction&#x29;" functionrelativelocation="84"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14754" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="1183" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="void updateSponsor&#x28;campaign.Sponsor, core.entityManagement.Transaction&#x29;" functionrelativelocation="84"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14563" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="1215" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="void updateSponsorContacts&#x28;campaign.Sponsor, core.entityManagement.Transaction&#x29;" functionrelativelocation="34"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14424" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignRefEntityMgr.java" line="1255" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignRefEntityMgr" functionprototype="void updateSubProducer&#x28;campaign.Producer, core.entityManagement.Transaction&#x29;" functionrelativelocation="32"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14527" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CampaignStatsEntityMgr.java" line="126" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CampaignStatsEntityMgr" functionprototype="void update&#x28;campaign.CampaignTestFigures, core.entityManagement.Transaction&#x29;" functionrelativelocation="85"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14706" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CheckDigitEntityMgr.java" line="51" sourcefilepath="aiu&#x2f;dmweb&#x2f;countryspecific&#x2f;SA&#x2f;" scope="aiu.dmweb.countryspecific.SA.CheckDigitEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="44"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14456" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryEntityManager.java" line="102" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountryEntityManager" functionprototype="void createCountry&#x28;referenceData.Country, core.entityManagement.Transaction&#x29;" functionrelativelocation="73"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14721" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryEntityManager.java" line="241" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountryEntityManager" functionprototype="void deleteCountryCurrency&#x28;java.lang.String, core.entityManagement.Transaction&#x29;" functionrelativelocation="47"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14623" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryEntityManager.java" line="318" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountryEntityManager" functionprototype="void insertCountryCurrency&#x28;java.util.ArrayList, java.lang.String, core.entityManagement.Transaction&#x29;" functionrelativelocation="60"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14358" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryEntityManager.java" line="542" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountryEntityManager" functionprototype="core.entityManagement.Entity retrieveCountry&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="53"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14782" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryEntityManager.java" line="645" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountryEntityManager" functionprototype="void retrieveCurrenciesForCountry&#x28;java.lang.String, referenceData.Country, java.lang.String&#x29;" functionrelativelocation="34"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14774" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryEntityManager.java" line="728" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountryEntityManager" functionprototype="core.entityManagement.Entity retrieveCurrency&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="36"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14425" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryEntityManager.java" line="825" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountryEntityManager" functionprototype="core.entityManagement.Entity retrieveDuplicate&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="37"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14729" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryEntityManager.java" line="1025" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountryEntityManager" functionprototype="void updateCountry&#x28;referenceData.Country, core.entityManagement.Transaction&#x29;" functionrelativelocation="54"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14658" module="dmweb.war" type="java.sql.PreparedStatement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery&#x28;&#x29; was called on the stmt object, which contains tainted data. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryRulesEntityMgr.java" line="73" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountryRulesEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="33"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14536" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryRulesEntityMgr.java" line="191" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountryRulesEntityMgr" functionprototype="void insert&#x28;rules.CountryRules, core.entityManagement.Transaction&#x29;" functionrelativelocation="83"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14483" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryRulesEntityMgr.java" line="252" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountryRulesEntityMgr" functionprototype="void update&#x28;rules.CountryRules, core.entityManagement.Transaction&#x29;" functionrelativelocation="73"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14671" module="dmweb.war" type="java.sql.PreparedStatement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery&#x28;&#x29; was called on the stmt object, which contains tainted data. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountrySecurityEntityMgr.java" line="77" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountrySecurityEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="36"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14629" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountrySecurityEntityMgr.java" line="211" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountrySecurityEntityMgr" functionprototype="void insert&#x28;security.CountrySecurity, core.entityManagement.Transaction&#x29;" functionrelativelocation="84"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14574" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountrySecurityEntityMgr.java" line="293" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CountrySecurityEntityMgr" functionprototype="void update&#x28;security.CountrySecurity, core.entityManagement.Transaction&#x29;" functionrelativelocation="77"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14550" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardCompanyEntityManager.java" line="119" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CreditCardCompanyEntityManager" functionprototype="void insertCreditCardCompany&#x28;billing.CreditCardCompany, core.entityManagement.Transaction&#x29;" functionrelativelocation="89"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14359" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardCompanyEntityManager.java" line="250" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CreditCardCompanyEntityManager" functionprototype="core.entityManagement.Entity retrieveCreditCardCompanies&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="39"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14791" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardCompanyEntityManager.java" line="410" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.CreditCardCompanyEntityManager" functionprototype="void updateCreditCardCompany&#x28;billing.CreditCardCompany, core.entityManagement.Transaction&#x29;" functionrelativelocation="88"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14368" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentEntityMgr.java" line="126" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.DocumentEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="52"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14428" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentEntityMgr.java" line="311" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.DocumentEntityMgr" functionprototype="void insertDocument&#x28;document.InternalDocument, core.entityManagement.Transaction&#x29;" functionrelativelocation="86"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14823" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentEntityMgr.java" line="423" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.DocumentEntityMgr" functionprototype="core.entityManagement.Entity retrieveDocument&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="70"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14726" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentEntityMgr.java" line="495" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.DocumentEntityMgr" functionprototype="core.entityManagement.Entity retrieveDuplicate&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="37"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14783" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentEntityMgr.java" line="596" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.DocumentEntityMgr" functionprototype="void updateDocument&#x28;document.InternalDocument, core.entityManagement.Transaction&#x29;" functionrelativelocation="75"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14481" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentQueueEntityManager.java" line="282" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.DocumentQueueEntityManager" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="70"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14534" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentQueueEntityManager.java" line="502" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.DocumentQueueEntityManager" functionprototype="void insert&#x28;document.QueueDocument, core.entityManagement.Transaction&#x29;" functionrelativelocation="89"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14724" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentQueueEntityManager.java" line="557" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.DocumentQueueEntityManager" functionprototype="void insertTprintqueueDetails&#x28;document.QueueDocument, core.entityManagement.Transaction&#x29;" functionrelativelocation="68"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14405" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentQueueEntityManager.java" line="625" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.DocumentQueueEntityManager" functionprototype="void update&#x28;document.QueueDocument, core.entityManagement.Transaction&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14601" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentQueueEntityManager.java" line="652" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.DocumentQueueEntityManager" functionprototype="void updateTprintqueue&#x28;document.QueueDocument, core.entityManagement.Transaction&#x29;" functionrelativelocation="46"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14834" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentReferenceData.java" line="200" sourcefilepath="aiu&#x2f;dmweb&#x2f;document&#x2f;" scope="aiu.dmweb.document.DocumentReferenceData" functionprototype="void retrieveDocuments&#x28;java.lang.String&#x29;" functionrelativelocation="28"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14421" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentSeriesEntityManager.java" line="220" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.DocumentSeriesEntityManager" functionprototype="core.entityManagement.Entity retrieveDocumentSeries&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14797" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExclusionsEntityMgr.java" line="81" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ExclusionsEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="55"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14474" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileConvertEntityManager.java" line="170" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.FileConvertEntityManager" functionprototype="core.entityManagement.Entity retrieveConvertFileLayout&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="38"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14785" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileConvertEntityManager.java" line="246" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.FileConvertEntityManager" functionprototype="core.entityManagement.Entity retrieveConvertFormatFields&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="37"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14462" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileConvertEntityManager.java" line="325" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.FileConvertEntityManager" functionprototype="core.entityManagement.Entity retrieveFileSummaryLayout&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="39"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14795" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FileConvertEntityManager.java" line="402" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.FileConvertEntityManager" functionprototype="core.entityManagement.Entity translateReferenceCode&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="52"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14398" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable strBuf. The tainted data originated from earlier calls to java.sql.statement.executequery, and javax.servlet.http.httpservletrequest.getpathinfo.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericEntityMgr.java" line="79" sourcefilepath="aiu&#x2f;core&#x2f;entityManagement&#x2f;" scope="aiu.core.entityManagement.GenericEntityMgr" functionprototype="Entity createEntity&#x28;java.lang.String, SqlConditionClause, boolean, java.lang.String&#x29;" functionrelativelocation="38"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14386" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable strBuf. The tainted data originated from earlier calls to java.sql.statement.executequery, and javax.servlet.http.httpservletrequest.getpathinfo.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericEntityMgr.java" line="168" sourcefilepath="aiu&#x2f;core&#x2f;entityManagement&#x2f;" scope="aiu.core.entityManagement.GenericEntityMgr" functionprototype="void delete&#x28;java.lang.String, EntityBean, Transaction&#x29;" functionrelativelocation="53"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14685" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable strBuf. The tainted data originated from earlier calls to java.sql.statement.executequery, and javax.servlet.http.httpservletrequest.getpathinfo.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericEntityMgr.java" line="212" sourcefilepath="aiu&#x2f;core&#x2f;entityManagement&#x2f;" scope="aiu.core.entityManagement.GenericEntityMgr" functionprototype="void insert&#x28;java.lang.String, EntityBean, Transaction&#x29;" functionrelativelocation="61"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14750" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable strBuf. The tainted data originated from earlier calls to java.sql.statement.executequery, and javax.servlet.http.httpservletrequest.getpathinfo.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericEntityMgr.java" line="358" sourcefilepath="aiu&#x2f;core&#x2f;entityManagement&#x2f;" scope="aiu.core.entityManagement.GenericEntityMgr" functionprototype="void update&#x28;java.lang.String, EntityBean, Transaction&#x29;" functionrelativelocation="68"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14569" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IssuingBranchEntityManager.java" line="128" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.IssuingBranchEntityManager" functionprototype="void insertIssuingBranch&#x28;referenceData.IssuingBranch, core.entityManagement.Transaction&#x29;" functionrelativelocation="87"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14610" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IssuingBranchEntityManager.java" line="207" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.IssuingBranchEntityManager" functionprototype="core.entityManagement.Entity retrieveHeadOfficeName&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="43"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14545" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IssuingBranchEntityManager.java" line="322" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.IssuingBranchEntityManager" functionprototype="core.entityManagement.Entity retrieveIssuingBranch&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="37"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14748" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IssuingBranchEntityManager.java" line="463" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.IssuingBranchEntityManager" functionprototype="void updateIssuingBranch&#x28;referenceData.IssuingBranch, core.entityManagement.Transaction&#x29;" functionrelativelocation="86"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14559" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IssuingCompanyEntityMgr.java" line="81" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.IssuingCompanyEntityMgr" functionprototype="core.entityManagement.Entity checkCountry&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="36"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14532" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IssuingCompanyEntityMgr.java" line="186" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.IssuingCompanyEntityMgr" functionprototype="core.entityManagement.Entity checkDuplicateCode&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="36"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14736" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IssuingCompanyEntityMgr.java" line="421" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.IssuingCompanyEntityMgr" functionprototype="void insertIssuingCompany&#x28;referenceData.IssuingCompany, core.entityManagement.Transaction&#x29;" functionrelativelocation="88"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14818" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IssuingCompanyEntityMgr.java" line="546" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.IssuingCompanyEntityMgr" functionprototype="core.entityManagement.Entity retrieveIssuingCompany&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="38"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14572" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IssuingCompanyEntityMgr.java" line="698" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.IssuingCompanyEntityMgr" functionprototype="void updateIssuingCompany&#x28;referenceData.IssuingCompany, core.entityManagement.Transaction&#x29;" functionrelativelocation="84"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="9617" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable addquery. The tainted data originated from earlier calls to java.sql.statement.executequery, and javax.servlet.http.httpservletrequest.getpathinfo.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-11-07 18&#x3a;05&#x3a;37 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LogFactory.java" line="710" sourcefilepath="aiu&#x2f;core&#x2f;logging&#x2f;" scope="aiu.core.logging.LogFactory" functionprototype="void writeToDB&#x28;util.AIUException&#x29;" functionrelativelocation="86"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14355" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="NotesEntityMgr.java" line="107" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.NotesEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="41"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14488" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="NotesEntityMgr.java" line="303" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.NotesEntityMgr" functionprototype="void insert&#x28;notes.Notes, core.entityManagement.Transaction&#x29;" functionrelativelocation="80"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14506" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="NotesEntityMgr.java" line="337" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.NotesEntityMgr" functionprototype="void update&#x28;notes.Notes, core.entityManagement.Transaction&#x29;" functionrelativelocation="77"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14809" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentCompanyEntityManager.java" line="126" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentCompanyEntityManager" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14435" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="305" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="void insert&#x28;billing.InternalPaymentTransaction, core.entityManagement.Transaction&#x29;" functionrelativelocation="90"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14530" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="315" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="void insert&#x28;billing.InternalPaymentTransaction, core.entityManagement.Transaction&#x29;" functionrelativelocation="95"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14374" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="448" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrieve&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="13"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14516" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="547" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrieve&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="50"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14345" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="751" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrievePremAdjTrans&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="30"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14403" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="853" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrievePremAdjTrans&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="83"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14734" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="944" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrieveChequeRejections&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="45"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14805" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="1090" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrieveDetailSummary&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="45"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14811" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="1150" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrieveDetailSummary&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="84"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14678" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="1228" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrieveLastBillDate&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="43"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14740" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="1458" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrievePendingRejections&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="65"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14651" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="1621" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrieveRejectionCount&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="55"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14547" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="1820" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrieveSummary&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="43"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14423" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentEntityManager.java" line="1922" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentEntityManager" functionprototype="core.entityManagement.Entity retrieveSummary&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="87"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14427" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PaymentMethodEntityMgr.java" line="111" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PaymentMethodEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="37"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14454" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="105" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void deleteProducts&#x28;java.lang.String, core.entityManagement.Transaction&#x29;" functionrelativelocation="81"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14459" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="152" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="java.util.ArrayList getProductBenefits&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="41"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14592" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="214" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="java.util.ArrayList getProductExclusions&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="51"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14362" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="260" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="java.util.ArrayList getRelBenefits&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="55"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14766" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="328" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void insertBenefit&#x28;plan.Benefits, core.entityManagement.Transaction&#x29;" functionrelativelocation="65"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14830" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="374" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void insertExclusion&#x28;plan.Exclusions, core.entityManagement.Transaction&#x29;" functionrelativelocation="65"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14643" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="547" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void insertPlan&#x28;plan.Plan, core.entityManagement.Transaction&#x29;" functionrelativelocation="91"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14771" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="733" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void insertProduct&#x28;plan.Plan, core.entityManagement.Transaction&#x29;" functionrelativelocation="93"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14581" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="989" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void insertRateCategory&#x28;plan.PlanRateCategory, core.entityManagement.Transaction&#x29;" functionrelativelocation="87"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14485" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="1153" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="core.entityManagement.Entity retrieveExclusions&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="56"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14728" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="1219" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void retrieveIndexation&#x28;java.sql.Connection, plan.Plan&#x29;" functionrelativelocation="17"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14699" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="1259" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void retrieveIndexation&#x28;java.sql.Connection, plan.Plan&#x29;" functionrelativelocation="73"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14533" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="1335" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="core.entityManagement.Entity retrievePlan&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="15"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14707" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="1470" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="core.entityManagement.Entity retrievePlan&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="55"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14662" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="1670" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="core.entityManagement.Entity retrieveRateCategory&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="36"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14802" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="1920" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void update&#x28;plan.Plan, core.entityManagement.Transaction&#x29;" functionrelativelocation="93"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14434" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="1961" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void updateBenefit&#x28;plan.Benefits, core.entityManagement.Transaction&#x29;" functionrelativelocation="66"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14343" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="1996" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void updateExclusion&#x28;plan.Exclusions, core.entityManagement.Transaction&#x29;" functionrelativelocation="66"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14665" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="2073" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void updateRateCategory&#x28;plan.PlanRateCategory, core.entityManagement.Transaction&#x29;" functionrelativelocation="87"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14759" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="2102" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void deleteIndexation&#x28;java.lang.String, core.entityManagement.Transaction&#x29;" functionrelativelocation="68"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14568" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="2181" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void getProductList&#x28;plan.Plan, java.util.Date, java.sql.Connection&#x29;" functionrelativelocation="20"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14798" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="2424" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void insertIndexation&#x28;plan.Plan, core.entityManagement.Transaction&#x29;" functionrelativelocation="91"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14482" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="2464" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="void delete&#x28;plan.Plan, core.entityManagement.Transaction&#x29;" functionrelativelocation="76"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14438" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanEntityManager.java" line="2493" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanEntityManager" functionprototype="int retrieveLanguage&#x28;java.sql.Connection, java.lang.String&#x29;" functionrelativelocation="37"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14702" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanIndexationEntityMgr.java" line="134" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PlanIndexationEntityMgr" functionprototype="core.entityManagement.Entity retrievePlanIndexation&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="33"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14413" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="179" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void copyBeneficiary&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="89"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14694" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="209" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void copyGifts&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="64"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14365" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="291" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void copyInsureds&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="85"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14696" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="395" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void copyPayment&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="89"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14745" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="470" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void copyPremium&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="86"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14668" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="583" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void copyRiders&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="68"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14723" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="631" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void copyRiders&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="93"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14767" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="750" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="42"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14351" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="901" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void delete&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="73"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14687" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="1229" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void insertBeneficiaries&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="92"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14639" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="1300" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void insertGifts&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="73"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14366" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="1468" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void insertInsureds&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="90"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14341" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="1647" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void insertPaymentOption&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="94"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14391" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="1799" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void insertPolicy&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="90"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14638" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="1935" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void insertProducts&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="92"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14733" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="2205" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void insertRiders&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="93"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14761" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, and java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="2289" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void insertCertBillFlag&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="82"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14741" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="2383" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void insertRiderExt&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="46"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14494" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="2460" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void insertRiderExt&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="90"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14653" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="2628" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="java.util.ArrayList retrieveBeneficiaries&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="44"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14713" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="2784" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="java.util.ArrayList retrieveGifts&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="46"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14776" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="2920" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="java.util.ArrayList retrieveInsureds&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14587" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3073" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void retrievePaymentAccount&#x28;java.sql.Connection, java.util.Hashtable, policy.Policy&#x29;" functionrelativelocation="35"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14832" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3230" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="java.util.ArrayList retrieveProducts&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="44"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14510" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3321" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="java.util.ArrayList retrievePubInterval&#x28;java.sql.Connection, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="42"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14416" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3453" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateBeneficiaries&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="41"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14524" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3516" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateInsured&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="46"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14497" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3524" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateInsured&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="68"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14627" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3571" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateLatestVersionFlag&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="13"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14554" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3581" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateLatestVersionFlag&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="24"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14742" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3593" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateLatestVersionFlag&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="42"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14518" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3600" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateLatestVersionFlag&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="49"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14593" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3607" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateLatestVersionFlag&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="56"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14406" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3614" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateLatestVersionFlag&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="63"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14490" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3636" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateLatestVersionFlag&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="84"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14778" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3769" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updatePaymentOption&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="91"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14642" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3818" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updatePolicy&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="74"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14396" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, java.sql.preparedstatement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3852" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateRider&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="35"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14477" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="3886" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void updateRider&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="88"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14514" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="4125" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="java.util.ArrayList retrieveRiders&#x28;java.sql.Connection, java.util.Hashtable, policy.Policy&#x29;" functionrelativelocation="46"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14672" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="4277" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="void retrieveFirstBillFlag&#x28;java.sql.Connection, java.util.Hashtable, policy.Policy, java.util.ArrayList&#x29;" functionrelativelocation="57"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14394" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="4524" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="java.util.ArrayList retrieveRiderExt&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="54"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14571" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="4606" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="core.entityManagement.Entity retrieveAssociatedPolicies&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="53"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14414" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyEntityMgr.java" line="4673" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyEntityMgr" functionprototype="core.entityManagement.Entity retrievePolicyWithStaff&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="49"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14544" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolderEntityMgr.java" line="198" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyHolderEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="44"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14731" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolderEntityMgr.java" line="388" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyHolderEntityMgr" functionprototype="void delete&#x28;policyHolder.PolicyHolder, core.entityManagement.Transaction&#x29;" functionrelativelocation="19"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14720" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolderEntityMgr.java" line="405" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyHolderEntityMgr" functionprototype="void delete&#x28;policyHolder.PolicyHolder, core.entityManagement.Transaction&#x29;" functionrelativelocation="52"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14722" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolderEntityMgr.java" line="597" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyHolderEntityMgr" functionprototype="void insert&#x28;policyHolder.PolicyHolder, core.entityManagement.Transaction&#x29;" functionrelativelocation="52"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14448" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, java.sql.preparedstatement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolderEntityMgr.java" line="694" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyHolderEntityMgr" functionprototype="void insert&#x28;policyHolder.PolicyHolder, core.entityManagement.Transaction&#x29;" functionrelativelocation="93"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14612" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolderEntityMgr.java" line="905" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyHolderEntityMgr" functionprototype="void update&#x28;policyHolder.PolicyHolder, core.entityManagement.Transaction&#x29;" functionrelativelocation="36"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14531" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolderEntityMgr.java" line="942" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyHolderEntityMgr" functionprototype="void update&#x28;policyHolder.PolicyHolder, core.entityManagement.Transaction&#x29;" functionrelativelocation="39"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14744" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolderEntityMgr.java" line="1102" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyHolderEntityMgr" functionprototype="void update&#x28;policyHolder.PolicyHolder, core.entityManagement.Transaction&#x29;" functionrelativelocation="95"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14747" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolderMiscEntityMgr.java" line="156" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyHolderMiscEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="32"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14594" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolderMiscEntityMgr.java" line="462" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyHolderMiscEntityMgr" functionprototype="void insert&#x28;policyHolder.PolicyHolderMisc, core.entityManagement.Transaction&#x29;" functionrelativelocation="87"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14439" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolderMiscEntityMgr.java" line="581" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyHolderMiscEntityMgr" functionprototype="void update&#x28;policyHolder.PolicyHolderMisc, core.entityManagement.Transaction&#x29;" functionrelativelocation="90"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14589" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyIndexationEntityMgr.java" line="204" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyIndexationEntityMgr" functionprototype="void deletePolicyIndexation&#x28;policy.PolicyIndexation, core.entityManagement.Transaction&#x29;" functionrelativelocation="44"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14817" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyIndexationEntityMgr.java" line="230" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyIndexationEntityMgr" functionprototype="void deleteProductIndexation&#x28;policy.PolicyProductIndexation, core.entityManagement.Transaction&#x29;" functionrelativelocation="36"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14680" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyIndexationEntityMgr.java" line="307" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyIndexationEntityMgr" functionprototype="void insertIndexation&#x28;policy.Indexation, core.entityManagement.Transaction&#x29;" functionrelativelocation="77"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14340" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyIndexationEntityMgr.java" line="347" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyIndexationEntityMgr" functionprototype="void insertPolicyIndexation&#x28;policy.PolicyIndexation, core.entityManagement.Transaction&#x29;" functionrelativelocation="76"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14564" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyIndexationEntityMgr.java" line="377" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyIndexationEntityMgr" functionprototype="void insertProductIndexation&#x28;policy.PolicyProductIndexation, core.entityManagement.Transaction&#x29;" functionrelativelocation="66"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14473" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyIndexationEntityMgr.java" line="486" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyIndexationEntityMgr" functionprototype="void retrieve&#x28;core.entityManagement.Entity, java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="51"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14558" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyIndexationEntityMgr.java" line="565" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyIndexationEntityMgr" functionprototype="void retrieveHistory&#x28;core.entityManagement.Entity, java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="41"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14484" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyLettersEntityMgr.java" line="99" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyLettersEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="36"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14657" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyLettersEntityMgr.java" line="250" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyLettersEntityMgr" functionprototype="void insert&#x28;policy.PolicyLetters, core.entityManagement.Transaction&#x29;" functionrelativelocation="77"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14615" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyProcessingEntityManager.java" line="912" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyProcessingEntityManager" functionprototype="core.entityManagement.Entity retrievePoliciesForRenewal&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="55"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14753" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyProcessingEntityManager.java" line="1154" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyProcessingEntityManager" functionprototype="void updatePolicyLastRenewal&#x28;policy.Policy, core.entityManagement.Transaction&#x29;" functionrelativelocation="59"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14708" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyProcessingEntityManager.java" line="1268" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyProcessingEntityManager" functionprototype="core.entityManagement.Entity retrieveLapsedPolicies&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="50"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14489" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyProcessingEntityManager.java" line="1425" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyProcessingEntityManager" functionprototype="core.entityManagement.Entity retrievePoliciesRenewalDue&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="52"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14692" module="dmweb.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyProcessingEntityManager.java" line="1551" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicyProcessingEntityManager" functionprototype="void updatePreRenewalFlag&#x28;utilities.EntityString, core.entityManagement.Transaction&#x29;" functionrelativelocation="56"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14528" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicySearchEntityMgr.java" line="372" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicySearchEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="75"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14487" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicySearchEntityMgr.java" line="668" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.PolicySearchEntityMgr" functionprototype="core.entityManagement.Entity retrievePoliciesWithExpiredCreditCard&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="60"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14542" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductEntityMgr.java" line="88" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProductEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="39"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14539" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductEntityMgr.java" line="252" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProductEntityMgr" functionprototype="void insertBenefits&#x28;plan.Product, core.entityManagement.Transaction&#x29;" functionrelativelocation="67"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14458" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductEntityMgr.java" line="298" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProductEntityMgr" functionprototype="void insertExclusions&#x28;plan.Product, core.entityManagement.Transaction&#x29;" functionrelativelocation="70"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14705" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductEntityMgr.java" line="364" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProductEntityMgr" functionprototype="void insertProduct&#x28;plan.Product, core.entityManagement.Transaction&#x29;" functionrelativelocation="83"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14622" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductEntityMgr.java" line="420" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProductEntityMgr" functionprototype="java.util.ArrayList retrieveBenefits&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="41"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14625" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductEntityMgr.java" line="458" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProductEntityMgr" functionprototype="java.util.ArrayList retrieveExclusions&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="41"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14712" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductEntityMgr.java" line="505" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProductEntityMgr" functionprototype="void update&#x28;plan.Product, core.entityManagement.Transaction&#x29;" functionrelativelocation="77"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14498" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductEntityMgr.java" line="536" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProductEntityMgr" functionprototype="void deleteBenefits&#x28;plan.Product, core.entityManagement.Transaction&#x29;" functionrelativelocation="35"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14775" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductEntityMgr.java" line="560" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProductEntityMgr" functionprototype="void deleteExclusions&#x28;plan.Product, core.entityManagement.Transaction&#x29;" functionrelativelocation="35"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14369" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProspectEntityMgr.java" line="83" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProspectEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="36"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14446" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProspectEntityMgr.java" line="276" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProspectEntityMgr" functionprototype="void insert&#x28;prospect.Prospect, core.entityManagement.Transaction&#x29;" functionrelativelocation="92"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14719" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProspectSystemNumberMgr.java" line="67" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ProspectSystemNumberMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="35"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14814" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QuickRef.java" line="130" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.QuickRef" functionprototype="java.lang.String getCampaignName&#x28;java.lang.String&#x29;" functionrelativelocation="46"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14401" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QuickRef.java" line="691" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.QuickRef" functionprototype="java.lang.String getMasterPolicyNumber&#x28;java.lang.String&#x29;" functionrelativelocation="53"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14357" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QuickRef.java" line="826" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.QuickRef" functionprototype="java.lang.String getPlanCurrencySymbol&#x28;java.lang.String&#x29;" functionrelativelocation="48"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14821" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QuickRef.java" line="908" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.QuickRef" functionprototype="java.lang.String getPlanName&#x28;java.lang.String&#x29;" functionrelativelocation="53"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14813" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QuickRef.java" line="1113" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.QuickRef" functionprototype="java.lang.String getSponsorNo&#x28;java.lang.String&#x29;" functionrelativelocation="52"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14515" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QuickRef.java" line="1190" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.QuickRef" functionprototype="double getStandardTax&#x28;java.lang.String, java.lang.String, java.util.Date&#x29;" functionrelativelocation="55"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14793" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QuickRef.java" line="1648" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.QuickRef" functionprototype="java.util.ArrayList getMOFNo&#x28;java.lang.String&#x29;" functionrelativelocation="41"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14561" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QuickRef.java" line="1865" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.QuickRef" functionprototype="java.lang.String getMOFDate&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="51"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14393" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="QuickRef.java" line="2009" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.QuickRef" functionprototype="java.lang.String getCurrencyCode&#x28;java.lang.String&#x29;" functionrelativelocation="46"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14749" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RatingEntityManager.java" line="83" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.RatingEntityManager" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14382" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RatingEntityManager.java" line="225" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.RatingEntityManager" functionprototype="void setRatingFactorCriteria&#x28;plan.Rating, java.lang.String, java.sql.Connection&#x29;" functionrelativelocation="52"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14460" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReceiptEntityMgr.java" line="57" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReceiptEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="31"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14429" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_taintobj.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReceiptEntityMgr.java" line="216" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReceiptEntityMgr" functionprototype="void update&#x28;billing.Receipt, core.entityManagement.Transaction&#x29;" functionrelativelocation="51"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14566" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferenceDataBeanEntityMgr.java" line="125" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReferenceDataBeanEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="50"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14815" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferenceDataBeanEntityMgr.java" line="180" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReferenceDataBeanEntityMgr" functionprototype="void insertLanguage&#x28;referenceData.Language, core.entityManagement.Transaction&#x29;" functionrelativelocation="68"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14495" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferenceDataBeanEntityMgr.java" line="217" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReferenceDataBeanEntityMgr" functionprototype="void insertRate&#x28;referenceData.Rates, core.entityManagement.Transaction&#x29;" functionrelativelocation="61"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14664" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferenceDataBeanEntityMgr.java" line="367" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReferenceDataBeanEntityMgr" functionprototype="core.entityManagement.Entity retrieveLanguage&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="54"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14675" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferenceDataBeanEntityMgr.java" line="482" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReferenceDataBeanEntityMgr" functionprototype="core.entityManagement.Entity retrieveRates&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="67"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14535" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferenceDataBeanEntityMgr.java" line="533" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReferenceDataBeanEntityMgr" functionprototype="void updateLanguage&#x28;referenceData.Language, core.entityManagement.Transaction&#x29;" functionrelativelocation="66"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14786" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferenceDataBeanEntityMgr.java" line="559" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReferenceDataBeanEntityMgr" functionprototype="void updateRate&#x28;referenceData.Rates, core.entityManagement.Transaction&#x29;" functionrelativelocation="62"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14667" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferenceDataBeanEntityMgr.java" line="642" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReferenceDataBeanEntityMgr" functionprototype="core.entityManagement.Entity retrieveStaffCode&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="67"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14470" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferenceDataEntityMgr.java" line="234" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReferenceDataEntityMgr" functionprototype="void createReferenceDataElement&#x28;referenceData.ReferenceData, core.entityManagement.Transaction&#x29;" functionrelativelocation="83"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14465" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferenceDataEntityMgr.java" line="347" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReferenceDataEntityMgr" functionprototype="core.entityManagement.Entity searchDataElement&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="53"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14409" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReferenceDataEntityMgr.java" line="440" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReferenceDataEntityMgr" functionprototype="void updateReferenceDataElement&#x28;referenceData.ReferenceData, core.entityManagement.Transaction&#x29;" functionrelativelocation="79"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14695" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReinsuranceEntityMgr.java" line="84" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReinsuranceEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14471" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReinsuranceEntityMgr.java" line="156" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReinsuranceEntityMgr" functionprototype="void delete&#x28;reinsurance.Reinsurance, core.entityManagement.Transaction&#x29;" functionrelativelocation="73"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14520" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReinsuranceEntityMgr.java" line="286" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReinsuranceEntityMgr" functionprototype="void insertLayerReinsurance&#x28;reinsurance.Reinsurance, core.entityManagement.Transaction&#x29;" functionrelativelocation="91"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14505" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReinsuranceEntityMgr.java" line="349" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReinsuranceEntityMgr" functionprototype="void insertLayers&#x28;reinsurance.Reinsurance, core.entityManagement.Transaction&#x29;" functionrelativelocation="83"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14693" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReinsuranceEntityMgr.java" line="407" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReinsuranceEntityMgr" functionprototype="void insertReinsurance&#x28;reinsurance.Reinsurance, core.entityManagement.Transaction&#x29;" functionrelativelocation="83"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14380" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReinsuranceEntityMgr.java" line="500" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReinsuranceEntityMgr" functionprototype="java.util.ArrayList retrieveLayerReinsurance&#x28;java.util.Hashtable&#x29;" functionrelativelocation="42"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14480" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ReinsuranceEntityMgr.java" line="591" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ReinsuranceEntityMgr" functionprototype="java.util.ArrayList retrieveLayers&#x28;java.util.Hashtable&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14645" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScheduleEntityManager.java" line="51" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ScheduleEntityManager" functionprototype="core.entityManagement.Entity backupDatabase&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="42"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14780" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScheduleEntityManager.java" line="222" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ScheduleEntityManager" functionprototype="core.entityManagement.Entity getScheduleNumber&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="44"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14633" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScheduleEntityManager.java" line="315" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ScheduleEntityManager" functionprototype="void insertQueue&#x28;scheduler.ScheduleQueue, core.entityManagement.Transaction&#x29;" functionrelativelocation="79"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14760" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScheduleEntityManager.java" line="417" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ScheduleEntityManager" functionprototype="void retreiveParam&#x28;java.sql.Connection, scheduler.ScheduleJob&#x29;" functionrelativelocation="37"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14546" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ScheduleEntityManager.java" line="786" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.ScheduleEntityManager" functionprototype="void updateQueue&#x28;scheduler.ScheduleQueue, core.entityManagement.Transaction&#x29;" functionrelativelocation="70"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="10404" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sSQL. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-11-07 18&#x3a;05&#x3a;37 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SysLogEntityMgr.java" line="99" sourcefilepath="aiu&#x2f;core&#x2f;logviewer&#x2f;" scope="aiu.core.logviewer.SysLogEntityMgr" functionprototype="entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14469" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SystemNumberManager.java" line="82" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.SystemNumberManager" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14659" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SystemNumberManager.java" line="152" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.SystemNumberManager" functionprototype="void insert&#x28;java.lang.String, core.entityManagement.Transaction&#x29;" functionrelativelocation="54"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14513" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TapeEntityMgr.java" line="99" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.TapeEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="27"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14389" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TapeEntityMgr.java" line="216" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.TapeEntityMgr" functionprototype="void delete&#x28;billing.Tape, core.entityManagement.Transaction&#x29;" functionrelativelocation="45"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14770" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TapeEntityMgr.java" line="232" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.TapeEntityMgr" functionprototype="void delete&#x28;billing.Tape, core.entityManagement.Transaction&#x29;" functionrelativelocation="71"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="10152" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-11-07 18&#x3a;05&#x3a;37 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TestBeanEntityMgr.java" line="114" sourcefilepath="aiu&#x2f;core&#x2f;dbConnections&#x2f;" scope="aiu.core.dbConnections.TestBeanEntityMgr" functionprototype="entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="51"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="10636" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-11-07 18&#x3a;05&#x3a;37 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TestBeanEntityMgr.java" line="195" sourcefilepath="aiu&#x2f;core&#x2f;dbConnections&#x2f;" scope="aiu.core.dbConnections.TestBeanEntityMgr" functionprototype="void delete&#x28;TestBean, entityManagement.Transaction&#x29;" functionrelativelocation="63"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="9476" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-11-07 18&#x3a;05&#x3a;37 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TestBeanEntityMgr.java" line="237" sourcefilepath="aiu&#x2f;core&#x2f;dbConnections&#x2f;" scope="aiu.core.dbConnections.TestBeanEntityMgr" functionprototype="void insert&#x28;TestBean, entityManagement.Transaction&#x29;" functionrelativelocation="69"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="3391" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-11-07 18&#x3a;05&#x3a;37 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TestBeanEntityMgr.java" line="342" sourcefilepath="aiu&#x2f;core&#x2f;dbConnections&#x2f;" scope="aiu.core.dbConnections.TestBeanEntityMgr" functionprototype="void update&#x28;TestBean, entityManagement.Transaction&#x29;" functionrelativelocation="83"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14450" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TPAAgencyEntityMgr.java" line="90" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.TPAAgencyEntityMgr" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="43"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14649" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TPAAgencyEntityMgr.java" line="175" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.TPAAgencyEntityMgr" functionprototype="void delete&#x28;campaign.TPAAgency, core.entityManagement.Transaction&#x29;" functionrelativelocation="39"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14630" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TPAAgencyEntityMgr.java" line="195" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.TPAAgencyEntityMgr" functionprototype="void deleteTPAAgencyLocations&#x28;campaign.TPAAgency, core.entityManagement.Transaction&#x29;" functionrelativelocation="39"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14352" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TPAAgencyEntityMgr.java" line="318" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.TPAAgencyEntityMgr" functionprototype="void insertTPAAgency&#x28;campaign.TPAAgency, core.entityManagement.Transaction&#x29;" functionrelativelocation="88"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14376" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TPAAgencyEntityMgr.java" line="397" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.TPAAgencyEntityMgr" functionprototype="void insertTPAAgencyLocations&#x28;campaign.TPAAgency, core.entityManagement.Transaction&#x29;" functionrelativelocation="85"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14440" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlBuffer. The tainted data originated from earlier calls to java.sql.statement.executequery, annotationvirtualcontroller.vc_taintobj, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TPAAgencyEntityMgr.java" line="467" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.TPAAgencyEntityMgr" functionprototype="java.util.ArrayList retrieveTPAAgencyLocations&#x28;java.sql.Connection, java.util.Hashtable&#x29;" functionrelativelocation="42"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14725" module="dmweb.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable SQLBuffer. The tainted data originated from an earlier call to java.sql.statement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TPAAgencyEntityMgr.java" line="550" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.TPAAgencyEntityMgr" functionprototype="void update&#x28;campaign.TPAAgency, core.entityManagement.Transaction&#x29;" functionrelativelocation="86"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14387" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlCommand. The tainted data originated from earlier calls to annotationvirtualcontroller.vc_taintobj, java.sql.statement.executequery, and java.sql.preparedstatement.executequery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ZipLocalEntityManager.java" line="105" sourcefilepath="aiu&#x2f;dmweb&#x2f;countryspecific&#x2f;SA&#x2f;" scope="aiu.dmweb.countryspecific.SA.ZipLocalEntityManager" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="59"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14384" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sql1. The tainted data originated from an earlier call to java.awt.textcomponent.gettext.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="1497" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void populateFromDatabase&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="44"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="14557" module="dmweb.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sql2. The tainted data originated from an earlier call to java.awt.textcomponent.gettext.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="1524" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void populateFromDatabase&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="72"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="3"/>
   <severity level="2">
      <category categoryid="7" categoryname="API Abuse" pcirelated="false">
         <desc>
            <para text="An API is a contract between a caller and a callee. Incorrect usage of certain API functions can result in exploitable security vulnerabilities."/>
            <para text="The most common forms of API abuse are caused by the caller failing to honor its end of this contract.  For example, if a program fails to call chdir&#x28;&#x29; after calling chroot&#x28;&#x29;, it violates the contract that specifies how to change the active root directory in a secure fashion.  Providing too few arguments to a varargs function such as printf&#x28;&#x29; also violates the API contract and will cause the missing parameters to be populated with unexpected data from the stack."/>
            <para text="Another common mishap is when the caller makes false assumptions about the callee&#x27;s behavior.  One example of this is when a caller expects a DNS-related function to return trustworthy information that can be used for authentication purposes.  This is a bad assumption because DNS responses can be easily spoofed."/>
         </desc>
         <recommendations>
            <para text="When calling API functions, be sure to fully understand and adhere to the specifications to avoid introducing security vulnerabilities.  Do not make assumptions about trustworthiness of the data returned from API calls or use the data in a context that was unintended by that API."/>
         </recommendations>
         <cwe cweid="245" cwename="J2EE Bad Practices&#x3a; Direct Management of Connections" pcirelated="false">
            <description>
               <text text="The J2EE application directly manages connections rather than using the container&#x27;s resource management facilities to obtain connections as specified in the J2EE standard.  Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="14436" module="dmweb.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="1495" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void populateFromDatabase&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="41"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="14626" module="dmweb.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConnectionPool.java" line="319" sourcefilepath="aiu&#x2f;core&#x2f;dbConnections&#x2f;" scope="aiu.core.dbConnections.ConnectionPool" functionprototype="ConnectionHolder openConnection&#x28;&#x29;" functionrelativelocation="8"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="14420" module="dmweb.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConnectionPoolAutoCommit.java" line="314" sourcefilepath="aiu&#x2f;core&#x2f;dbConnections&#x2f;" scope="aiu.core.dbConnections.ConnectionPoolAutoCommit" functionprototype="ConnectionHolder openConnection&#x28;&#x29;" functionrelativelocation="13"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="14521" module="dmweb.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LogFactory.java" line="160" sourcefilepath="aiu&#x2f;core&#x2f;logging&#x2f;" scope="aiu.core.logging.LogFactory" functionprototype="void enableSystemLog&#x28;&#x29;" functionrelativelocation="85"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="17" categoryname="Code Quality" pcirelated="false">
         <desc>
            <para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to&#x3a;">
               <bulletitem text="Neglecting to remove debug code or dead code"/>
               <bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
               <bulletitem text="Using the incorrect operator to compare objects"/>
               <bulletitem text="Failing to follow an API or framework specification"/>
               <bulletitem text="Using a language feature or API in an unintended manner"/>
            </para>
            <para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
         </desc>
         <recommendations>
            <para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="404" cwename="Improper Resource Shutdown or Release" pcirelated="false" certc="743" certcpp="876" certjava="857">
            <description>
               <text text="The application fails to release &#x28;or incorrectly releases&#x29; a system resource before it is made available for re-use.  This condition often occurs with resources such as database connections or file handles.  Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be possible to launch a denial of service attack by depleting the resource pool."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Improper Resource Shutdown or Release" count="1" issueid="2082" module="dmweb.war" type="java.lang.ClassLoader.getResourceAsStream" description="There are total of 297 instances. The program fails to release or incorrectly releases some variables, e.g. the variable temp, which was previously allocated by a call to java.lang.ClassLoader.getResourceAsStream&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="nnc" grace_period_expires="2017-11-07 18&#x3a;05&#x3a;37 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ComponentControl.java" line="47" sourcefilepath="aiu&#x2f;core&#x2f;component&#x2f;" scope="aiu.core.component.ComponentControl" functionprototype="void &#x21;ctor&#x28;&#x29;" functionrelativelocation="19"/>
            </staticflaws>
         </cwe>
         <cwe cweid="597" cwename="Use of Wrong Operator in String Comparison" pcirelated="false" certjava="847">
            <description>
               <text text="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality or &#x27;&#x21;&#x3d;&#x27; for inequality actually compares the object references rather than their values.  It is unlikely that this reflects the intended application logic."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="14388" module="dmweb.war" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AssociatedDocumentEntityManager.java" line="55" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.AssociatedDocumentEntityManager" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="7"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="14738" module="dmweb.war" type="span.equ" description="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x3d;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AssociatedDocumentEntityManager.java" line="206" sourcefilepath="aiu&#x2f;dmweb&#x2f;dataServices&#x2f;" scope="aiu.dmweb.dataServices.AssociatedDocumentEntityManager" functionprototype="core.entityManagement.Entity createEntity&#x28;java.lang.String, java.util.Hashtable, boolean, java.lang.String&#x29;" functionrelativelocation="69"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="14422" module="dmweb.war" type="span.equ" description="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x3d;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DMUtilities.java" line="575" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.DMUtilities" functionprototype="boolean isSubBranchStaffRequired&#x28;java.lang.String&#x29;" functionrelativelocation="68"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="14390" module="dmweb.war" type="span.equ" description="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x3d;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DMUtilities.java" line="616" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.DMUtilities" functionprototype="java.lang.String getDateFormat&#x28;java.util.Date&#x29;" functionrelativelocation="0"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="14763" module="dmweb.war" type="span.equ" description="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x3d;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DMUtilities.java" line="847" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.DMUtilities" functionprototype="java.util.Date getShortDate&#x28;java.util.Locale, java.util.Date&#x29;" functionrelativelocation="3"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="14339" module="dmweb.war" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DMUtilities.java" line="1522" sourcefilepath="aiu&#x2f;dmweb&#x2f;utilities&#x2f;" scope="aiu.dmweb.utilities.DMUtilities" functionprototype="boolean isRoundRuleType&#x28;java.lang.String&#x29;" functionrelativelocation="45"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="4011" module="dmweb.war" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-11-07 18&#x3a;05&#x3a;37 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login.java" line="1558" sourcefilepath="aiu&#x2f;core&#x2f;login&#x2f;" scope="aiu.core.login.Login" functionprototype="void startLoginHTML&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String&#x29;" functionrelativelocation="56"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="14445" module="dmweb.war" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login.java" line="2512" sourcefilepath="aiu&#x2f;dmweb&#x2f;login&#x2f;" scope="aiu.dmweb.login.Login" functionprototype="void startLoginHTML&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String&#x29;" functionrelativelocation="67"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="7727" module="dmweb.war" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-11-07 18&#x3a;05&#x3a;37 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ObjectStore.java" line="175" sourcefilepath="aiu&#x2f;core&#x2f;util&#x2f;" scope="aiu.core.util.ObjectStore" functionprototype="java.lang.Object removeObject&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="4"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="12301" module="dmweb.war" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-11-07 18&#x3a;05&#x3a;37 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ObjectStore.java" line="221" sourcefilepath="aiu&#x2f;core&#x2f;util&#x2f;" scope="aiu.core.util.ObjectStore" functionprototype="java.lang.Object retrieveObject&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="4"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="14377" module="dmweb.war" type="span.equ" description="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x3d;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicyHolder.java" line="295" sourcefilepath="aiu&#x2f;dmweb&#x2f;policyHolder&#x2f;" scope="aiu.dmweb.policyHolder.PolicyHolder" functionprototype="void setMiscExist&#x28;java.lang.String&#x29;" functionrelativelocation="20"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="false">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm&#x3b; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &#x22;security through obscurity&#x22; rather than sound mathematics.  Select key sizes appropriate for the data being protected&#x3b; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="614" cwename="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" pcirelated="false" owasp="934" sans="311">
            <description>
               <text text="Setting the Secure attribute on an HTTP cookie instructs the web browser to send it only over a secure channel, such as a TLS connection.  Issuing a cookie without the Secure attribute allows the browser to transmit it over unencrypted connections, which are susceptible to eavesdropping.  It is particularly important to set the Secure attribute on any cookies containing sensitive data, such as authentication information &#x28;e.g. &#x22;remember me&#x22; style functionality&#x29;."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="14385" module="dmweb.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DisplayScreenServlet.java" line="64" sourcefilepath="aiu&#x2f;dmweb&#x2f;login&#x2f;" scope="aiu.dmweb.login.DisplayScreenServlet" functionprototype="void service&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="10"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="8" categoryname="Information Leakage" pcirelated="false">
         <desc>
            <para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product&#x27;s own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
            <para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to&#x3a;">
               <bulletitem text="Source code disclosure"/>
               <bulletitem text="Browsable directories"/>
               <bulletitem text="Log files or backup files in web-accessible directories"/>
               <bulletitem text="Unfiltered backend error messages"/>
               <bulletitem text="Exception stack traces"/>
               <bulletitem text="Server version information"/>
               <bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
            </para>
         </desc>
         <recommendations>
            <para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
            <para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application&#x27;s web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
         </recommendations>
         <cwe cweid="201" cwename="Information Exposure Through Sent Data" pcirelated="false">
            <description>
               <text text="Sensitive information may be exposed as a result of outbound network connections made by the application.  This can manifest in a couple of different ways."/>
               <text text="In C&#x2f;C&#x2b;&#x2b; applications, sometimes the developer fails to zero out a buffer before populating it with data.  This can cause information leakage if, for example, the buffer contains a data structure for which only certain fields were populated.  The uninitialized fields would contain whatever data is present at that memory location.  Sensitive information from previously allocated variables could then be leaked when the buffer is sent over the network."/>
               <text text="Mobile applications may also transmit sensitive information such as email or SMS messages, address book entries, GPS location data, and anything else that can be accessed by the mobile API.  This behavior is common in mobile spyware applications designed to exfiltrate data to a listening post or other data collection point.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="8632" module="dmweb.war" type="java.net.URL.openConnection" description="The application calls the java.net.URL.openConnection&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. openConnection&#x28;&#x29; was called on the url object, which contains potentially sensitive data. The potentially sensitive data originated from an earlier call to java.util.properties.load.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ApplicationHome.java" line="165" sourcefilepath="aiu&#x2f;core&#x2f;component&#x2f;" scope="aiu.core.component.ApplicationHome" functionprototype="java.lang.String processRemoteTransaction&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="22"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="2790" module="dmweb.war" type="java.net.URL.openConnection" description="The application calls the java.net.URL.openConnection&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. openConnection&#x28;&#x29; was called on the url object, which contains potentially sensitive data. The potentially sensitive data originated from an earlier call to java.util.properties.load.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ApplicationHome.java" line="562" sourcefilepath="aiu&#x2f;core&#x2f;component&#x2f;" scope="aiu.core.component.ApplicationHome" functionprototype="java.lang.String processRequestViaHTTP&#x28;java.lang.String&#x29;" functionrelativelocation="23"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="14711" module="dmweb.war" type="java.io.PrintWriter.println" description="The application calls the java.io.PrintWriter.println&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to println&#x28;&#x29; contains potentially sensitive data from the variable dmsettingGroup. The potentially sensitive data originated from an earlier call to java.util.properties.load. The potentially sensitive data is directed into an output stream returned by javax.servlet.servletresponse.getwriter.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DisplayScreenServlet.java" line="121" sourcefilepath="aiu&#x2f;dmweb&#x2f;login&#x2f;" scope="aiu.dmweb.login.DisplayScreenServlet" functionprototype="void service&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="46"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="14682" module="dmweb.war" type="javax.mail.Transport.send" description="The application calls the javax.mail.Transport.send&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to send&#x28;&#x29; contains potentially sensitive data from the variable message. The potentially sensitive data originated from an earlier call to java.util.properties.load.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EMailFactory.java" line="179" sourcefilepath="aiu&#x2f;core&#x2f;email&#x2f;" scope="aiu.core.email.EMailFactory" functionprototype="void sendMimeMessage&#x28;EMailMessage&#x29;" functionrelativelocation="12"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="14399" module="dmweb.war" type="java.io.PrintWriter.println" description="The application calls the java.io.PrintWriter.println&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to println&#x28;&#x29; contains potentially sensitive data from the variable sb. The potentially sensitive data originated from an earlier call to java.util.properties.load. The potentially sensitive data is directed into an output stream returned by javax.servlet.servletresponse.getwriter.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Login.java" line="2309" sourcefilepath="aiu&#x2f;dmweb&#x2f;login&#x2f;" scope="aiu.dmweb.login.Login" functionprototype="void showForgotPasswordHtml&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String&#x29;" functionrelativelocation="98"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="14" categoryname="Time and State" pcirelated="false">
         <desc>
            <para text="Time and State flaws are related to unexpected interactions between threads, processes, time, and information. These interactions happen through shared state&#x3a; semaphores, variables, the filesystem, and basically anything that can store information.  Vulnerabilities occur when there is a discrepancy between the programmer&#x27;s assumption of how a program executes and what happens in reality. "/>
            <para text="State issues result from improper management or invalid assumptions about system state, such as assuming mutable objects are immutable.  Though these conditions are less commonly exploited by attackers, state issues can lead to unpredictable or undefined application behavior."/>
         </desc>
         <recommendations>
            <para text="Limit the interleaving of operations on resources from multiple processes.  Use locking mechanisms to protect resources effectively.  Follow best practices with respect to mutable objects and internal references.  Pay close attention to asynchronous actions in processes and make copious use of sanity checks in systems that may be subject to synchronization errors."/>
         </recommendations>
         <cwe cweid="382" cwename="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" pcirelated="false" certjava="851">
            <description>
               <text text="A web applications should not attempt to shut down its container.  A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application.  Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="5982" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-11-06 08&#x3a;27&#x3a;08 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-11-07 18&#x3a;05&#x3a;37 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AdministrativeGUI.java" line="62" sourcefilepath="aiu&#x2f;core&#x2f;component&#x2f;" scope="aiu.core.component.AdministrativeGUI&#x24;2" functionprototype="void actionPerformed&#x28;java.awt.event.ActionEvent&#x29;" functionrelativelocation="70"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14575" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AdministrativeGUI.java" line="75" sourcefilepath="aiu&#x2f;core&#x2f;component&#x2f;" scope="aiu.core.component.AdministrativeGUI&#x24;3" functionprototype="void windowClosing&#x28;java.awt.event.WindowEvent&#x29;" functionrelativelocation="60"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14402" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingReferenceData.java" line="236" sourcefilepath="aiu&#x2f;dmweb&#x2f;billing&#x2f;" scope="aiu.dmweb.billing.BillingReferenceData" functionprototype="void retrieveBankBranch&#x28;&#x29;" functionrelativelocation="98"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14373" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingReferenceData.java" line="282" sourcefilepath="aiu&#x2f;dmweb&#x2f;billing&#x2f;" scope="aiu.dmweb.billing.BillingReferenceData" functionprototype="void retrieveBankBranchAddress&#x28;&#x29;" functionrelativelocation="98"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14590" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingReferenceData.java" line="367" sourcefilepath="aiu&#x2f;dmweb&#x2f;billing&#x2f;" scope="aiu.dmweb.billing.BillingReferenceData" functionprototype="void retrieveBillingOrg&#x28;&#x29;" functionrelativelocation="99"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14580" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingReferenceData.java" line="461" sourcefilepath="aiu&#x2f;dmweb&#x2f;billing&#x2f;" scope="aiu.dmweb.billing.BillingReferenceData" functionprototype="void retrieveCodes&#x28;&#x29;" functionrelativelocation="99"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14684" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BillingReferenceData.java" line="590" sourcefilepath="aiu&#x2f;dmweb&#x2f;billing&#x2f;" scope="aiu.dmweb.billing.BillingReferenceData" functionprototype="void retrieveBillOrgDataElems&#x28;&#x29;" functionrelativelocation="98"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14752" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="307" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder&#x24;8" functionprototype="void windowClosing&#x28;java.awt.event.WindowEvent&#x29;" functionrelativelocation="20"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14597" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="665" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void createBean&#x28;ClassObject&#x29;" functionrelativelocation="10"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14370" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="851" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void createBean&#x28;ClassObject&#x29;" functionrelativelocation="89"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14681" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="869" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void createBean&#x28;ClassObject&#x29;" functionrelativelocation="92"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14432" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="869" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void createBean&#x28;ClassObject&#x29;" functionrelativelocation="99"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14364" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="869" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void createBean&#x28;ClassObject&#x29;" functionrelativelocation="96"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14669" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="929" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void createMetaDataFile&#x28;ClassObject&#x29;" functionrelativelocation="86"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14787" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="929" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void createMetaDataFile&#x28;ClassObject&#x29;" functionrelativelocation="74"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14697" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="929" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void createMetaDataFile&#x28;ClassObject&#x29;" functionrelativelocation="98"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14383" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="1362" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void createMgrClass&#x28;ClassObject&#x29;" functionrelativelocation="97"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14660" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="1362" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void createMgrClass&#x28;ClassObject&#x29;" functionrelativelocation="99"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14344" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ClassBuilder.java" line="1362" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.ClassBuilder" functionprototype="void createMgrClass&#x28;ClassObject&#x29;" functionrelativelocation="95"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14567" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CountryReferenceData.java" line="174" sourcefilepath="aiu&#x2f;dmweb&#x2f;referenceData&#x2f;" scope="aiu.dmweb.referenceData.CountryReferenceData" functionprototype="void retrieveCountries&#x28;&#x29;" functionrelativelocation="97"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14655" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CurrencyReferenceData.java" line="128" sourcefilepath="aiu&#x2f;dmweb&#x2f;referenceData&#x2f;" scope="aiu.dmweb.referenceData.CurrencyReferenceData" functionprototype="void retrieveCurrencies&#x28;&#x29;" functionrelativelocation="97"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14412" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentReferenceData.java" line="221" sourcefilepath="aiu&#x2f;dmweb&#x2f;document&#x2f;" scope="aiu.dmweb.document.DocumentReferenceData" functionprototype="void retrieveDocuments&#x28;java.lang.String&#x29;" functionrelativelocation="63"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14764" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DocumentReferenceData.java" line="299" sourcefilepath="aiu&#x2f;dmweb&#x2f;document&#x2f;" scope="aiu.dmweb.document.DocumentReferenceData" functionprototype="void retrievePlanDocuments&#x28;&#x29;" functionrelativelocation="67"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14824" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericClassBuilder.java" line="314" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.GenericClassBuilder&#x24;8" functionprototype="void windowClosing&#x28;java.awt.event.WindowEvent&#x29;" functionrelativelocation="20"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14613" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericClassBuilder.java" line="348" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.GenericClassBuilder" functionprototype="void createBean&#x28;ClassObject&#x29;" functionrelativelocation="6"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14801" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericClassBuilder.java" line="634" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.GenericClassBuilder" functionprototype="void createBean&#x28;ClassObject&#x29;" functionrelativelocation="93"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14788" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericClassBuilder.java" line="652" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.GenericClassBuilder" functionprototype="void createBean&#x28;ClassObject&#x29;" functionrelativelocation="99"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14455" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericClassBuilder.java" line="652" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.GenericClassBuilder" functionprototype="void createBean&#x28;ClassObject&#x29;" functionrelativelocation="97"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14732" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericClassBuilder.java" line="652" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.GenericClassBuilder" functionprototype="void createBean&#x28;ClassObject&#x29;" functionrelativelocation="95"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14491" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericClassBuilder.java" line="1074" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.GenericClassBuilder" functionprototype="void createMgrClass&#x28;ClassObject&#x29;" functionrelativelocation="99"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14609" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericClassBuilder.java" line="1074" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.GenericClassBuilder" functionprototype="void createMgrClass&#x28;ClassObject&#x29;" functionrelativelocation="95"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14457" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GenericClassBuilder.java" line="1074" sourcefilepath="aiu&#x2f;core&#x2f;classbuilder&#x2f;" scope="aiu.core.classbuilder.GenericClassBuilder" functionprototype="void createMgrClass&#x28;ClassObject&#x29;" functionrelativelocation="97"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14517" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanReferenceData.java" line="251" sourcefilepath="aiu&#x2f;dmweb&#x2f;plan&#x2f;" scope="aiu.dmweb.plan.PlanReferenceData" functionprototype="void retrieveBenefits&#x28;&#x29;" functionrelativelocation="98"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14666" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanReferenceData.java" line="296" sourcefilepath="aiu&#x2f;dmweb&#x2f;plan&#x2f;" scope="aiu.dmweb.plan.PlanReferenceData" functionprototype="void retrieveExclusions&#x28;&#x29;" functionrelativelocation="98"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14772" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanReferenceData.java" line="361" sourcefilepath="aiu&#x2f;dmweb&#x2f;plan&#x2f;" scope="aiu.dmweb.plan.PlanReferenceData" functionprototype="void retrievePlanCategories&#x28;&#x29;" functionrelativelocation="99"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14829" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanReferenceData.java" line="402" sourcefilepath="aiu&#x2f;dmweb&#x2f;plan&#x2f;" scope="aiu.dmweb.plan.PlanReferenceData" functionprototype="void retrieveProducts&#x28;&#x29;" functionrelativelocation="98"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14779" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanReferenceData.java" line="444" sourcefilepath="aiu&#x2f;dmweb&#x2f;plan&#x2f;" scope="aiu.dmweb.plan.PlanReferenceData" functionprototype="void retrieveRIStructureCd&#x28;&#x29;" functionrelativelocation="97"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14784" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanReferenceData.java" line="601" sourcefilepath="aiu&#x2f;dmweb&#x2f;plan&#x2f;" scope="aiu.dmweb.plan.PlanReferenceData" functionprototype="void retrieveRatingDescription&#x28;&#x29;" functionrelativelocation="98"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14796" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PlanReferenceData.java" line="656" sourcefilepath="aiu&#x2f;dmweb&#x2f;plan&#x2f;" scope="aiu.dmweb.plan.PlanReferenceData" functionprototype="void retrieveBenefitStaticAmounts&#x28;&#x29;" functionrelativelocation="97"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14773" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicySecurityService.java" line="158" sourcefilepath="aiu&#x2f;dmweb&#x2f;policy&#x2f;" scope="aiu.dmweb.policy.PolicySecurityService" functionprototype="void retrieveGroupPermissions&#x28;&#x29;" functionrelativelocation="98"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="1" issueid="14781" module="dmweb.war" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2017-12-07 09&#x3a;22&#x3a;52 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="2017-12-08 11&#x3a;55&#x3a;27 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="PolicySecurityService.java" line="194" sourcefilepath="aiu&#x2f;dmweb&#x2f;policy&#x2f;" scope="aiu.dmweb.policy.PolicySecurityService" functionprototype="void retrieveGroups&#x28;&#x29;" functionrelativelocation="97"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="1"/>
   <severity level="0"/>
   <flaw-status new="0" reopen="0" open="365" cannot-reproduce="0" fixed="2" total="365" not_mitigated="365" sev-1-change="0" sev-2-change="0" sev-3-change="0" sev-4-change="-2" sev-5-change="0"/>
   <customfields>
      <customfield name="Region" value="APAC"/>
      <customfield name="Batch" value=""/>
      <customfield name="AIG App ID" value="1273"/>
      <customfield name="Custom 4" value=""/>
      <customfield name="Custom 5" value=""/>
      <customfield name="Custom 6" value=""/>
      <customfield name="Custom 7" value=""/>
      <customfield name="Custom 8" value=""/>
      <customfield name="Custom 9" value=""/>
      <customfield name="Custom 10" value=""/>
   </customfields>
   <software_composition_analysis third_party_components="5" violate_policy="false" components_violated_policy="0">
      <vulnerable_components>
         <component file_name="xercesImpl.jar" sha1="65fb666e5f683be34dace14fe072c62b2d38f90b" vulnerabilities="0" max_cvss_score="" version="2.0.1" library="xerces" vendor="xerces" description="">
            <file_paths>
               <file_path value="file&#x3a;&#x5c;dmweb.war&#x23;zip&#x3a;WEB-INF&#x5c;lib&#x5c;xercesImpl.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component file_name="xalan.jar" sha1="2d3be19a8c96ef8d5fed3141a35f7d23cd5f8927" vulnerabilities="1" max_cvss_score="7.5" version="2.4.0" library="xalan" vendor="xalan" description="">
            <file_paths>
               <file_path value="file&#x3a;&#x5c;dmweb.war&#x23;zip&#x3a;WEB-INF&#x5c;lib&#x5c;xalan.jar"/>
            </file_paths>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2014-0107" cvss_score="7.5" severity="4" cwe_id="CWE-264" cve_summary="The TransformerFactory in Apache Xalan-Java before 2.7.2 does not properly restrict access to certain properties when FEATURE_SECURE_PROCESSING is enabled, which allows remote attackers to bypass expected restrictions and load arbitrary classes or access external resources via a crafted &#x28;1&#x29; xalan&#x3a;content-header, &#x28;2&#x29; xalan&#x3a;entities, &#x28;3&#x29; xslt&#x3a;content-header, or &#x28;4&#x29; xslt&#x3a;entities property, or a Java property that is bound to the XSLT 1.0 system-property function."/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component file_name="jakarta-regexp-1.4.jar" sha1="0ea514a179ac1dd7e81c7e6594468b9b9910d298" vulnerabilities="0" max_cvss_score="" version="1.4" library="jakarta-regexp" vendor="jakarta-regexp" description="">
            <file_paths>
               <file_path value="file&#x3a;&#x5c;dmweb.war&#x23;zip&#x3a;WEB-INF&#x5c;lib&#x5c;jakarta-regexp-1.4.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component file_name="log4j-1.2.17.jar" sha1="5af35056b4d257e4b64b9e8069c0746e8b08629f" vulnerabilities="0" max_cvss_score="" version="1.2.17" library="log4j" vendor="log4j" description="Apache Log4j 1.2">
            <file_paths>
               <file_path value="file&#x3a;&#x5c;dmweb.war&#x23;zip&#x3a;WEB-INF&#x5c;lib&#x5c;log4j-1.2.17.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component file_name="esapi-2.1.0.1.jar" sha1="236dfa26cd1059a30a072163e6d70d967c3ad199" vulnerabilities="0" max_cvss_score="" version="2.1.0.1" library="esapi" vendor="org.lucee" description="OSGi Version of ESAPI">
            <file_paths>
               <file_path value="file&#x3a;&#x5c;dmweb.war&#x23;zip&#x3a;WEB-INF&#x5c;lib&#x5c;esapi-2.1.0.1.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
      </vulnerable_components>
   </software_composition_analysis>
</detailedreport>
